@using Newtonsoft.Json
@model OnlineEventsMarketingApp.Models.Data.DataSheetViewModel
@{
    ViewBag.Title = "Data Sheet";
    ViewBag.Container = "container-fluid";
}

<h2>Data Sheet</h2>

@using (Html.BeginForm("DataSheet", "Data", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <div class="row">
        <div class="col-xs-12 col-md-6">
            <div class="col-md-6">
                @Html.DropDownListFor(m => m.Month, Model.Months, new { @class = "form-control t1" })
            </div>
            <div class="col-md-6">
                @Html.DropDownListFor(m => m.Year, Model.Years, new { @class = "form-control t1" })
            </div>
        </div>
        <div class="col-xs-12 col-md-6 pull-right">

            <div class="pull-right">
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.File, new { type = "file", @class = "form-control t1", accept = ".xlsx, .xls, .csv" })
                </div>
                <div class="col-md-6">
                    <button class="btn btn-default t1">Import Data</button>
                    @Html.ActionLink("Export Data", "ExportToExcel", new { month = Model.Month, year = Model.Year }, new { @class = "btn btn-success t1 js-export" })
                </div>
            </div>
        </div>
    </div>
}

<div class="row">
    <table class="table t1 table-responsive table-striped">
        <tr>
            @*<th>ID</th>*@
            <th>DIS</th>
            <th>TE</th>
            <th>TM</th>
            <th>Area</th>
            <th>In House</th>
            <th>RND</th>
            <th>Date</th>
            <th>New Users</th>
            <th>Existing Users</th>
            <th>Status</th>
            <th># Of Patients</th>
            <th>Tag</th>
        </tr>
        <tbody data-bind="foreach: datasheets">
            <tr>
                @*<td data-bind="text: DataSheetId"></td>*@
                <!-- ko if: $root.isAdmin == 'True' -->
                <td>
                    <input type="text" class="form-control" data-bind="value: DIS" />
                </td>
                <!-- /ko -->
                <!-- ko if: $root.isAdmin == 'False' -->
                <td data-bind="text: DIS"></td>
                <!-- /ko -->
                <!-- ko if: $root.isAdmin == 'True' -->
                <td>
                    <input type="text" class="form-control" data-bind="value: TE" />
                </td>
                <!-- /ko -->
                <!-- ko if: $root.isAdmin == 'False' -->
                <td data-bind="text: TE"></td>
                <!-- /ko -->
                <!-- ko if: $root.isAdmin == 'True' -->
                <td>
                    <input type="text" class="form-control" data-bind="value: TM" />
                </td>
                <!-- /ko -->
                <!-- ko if: $root.isAdmin == 'False' -->
                <td data-bind="text: TM"></td>
                <!-- /ko -->
                <!-- ko if: $root.isAdmin == 'True' -->
                <td>
                    <input type="text" class="form-control" data-bind="value: Area" />
                </td>
                <!-- /ko -->
                <!-- ko if: $root.isAdmin == 'False' -->
                <td data-bind="text: Area"></td>
                <!-- /ko -->
                <!-- ko if: $root.isAdmin == 'True' -->
                <td>
                    <input type="text" class="form-control" data-bind="value: InHouse" />
                </td>
                <!-- /ko -->
                <!-- ko if: $root.isAdmin == 'False' -->
                <td data-bind="text: InHouse"></td>
                <!-- /ko -->
                <!-- ko if: $root.isAdmin == 'True' -->
                <td>
                    <input type="text" class="form-control" data-bind="value: Rnd" />
                </td>
                <!-- /ko -->
                <!-- ko if: $root.isAdmin == 'False' -->
                <td data-bind="text: Rnd"></td>
                <!-- /ko -->
                <td><input class='form-control' data-bind="datePicker: Date"  /></td>
                <td><input class='form-control' data-bind='value: NewUsers' type="number" /></td>
                <td><input class='form-control' data-bind='value: ExistingUsers' type="number" /></td>
                <td>
                    <input class='form-control' data-bind='value: TagId' />
                </td>
                <td><input class='form-control' data-bind='value: NoOfPatients' type="number" /></td>
                <td width="120">
                    <select data-bind='options: $root.tags, optionsText: "TagName", optionsValue: "TagId", value:TagId' class="form-control"></select>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="row">
        <div class="col-md-12"><input type="button" value="Submit" class="btn btn-success" data-bind="click: submitChanges" /></div>
</div>

<textarea data-bind="value: ko.toJSON(datasheets)"></textarea>

@section Scripts {
    <script src="~/Scripts/Data/datasheet.js" type="text/javascript"></script>

    <script type="text/javascript">

        var datasheet = function(data) {
            var self = this;
            self.DataSheetId = data.DataSheetId;
            self.DIS = ko.observable(data.DIS);
            self.TE = ko.observable(data.TE);
            self.TM = ko.observable(data.TM);
            self.Area = ko.observable(data.Area);
            self.InHouse = ko.observable(data.InHouse);
            self.Rnd = ko.observable(data.Rnd);
            self.Date = ko.observable(data.Date);
            self.NewUsers = ko.observable(data.NewUsers);
            self.ExistingUsers = ko.observable();
            self.Status = ko.observable(data.Status);
            self.NoOfPatients = ko.observable(data.NoOfPatients);
            self.TagId = ko.observable(data.TagId);
        };

        ko.bindingHandlers.datePicker = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel) {
                var dataSource = valueAccessor();

                var options = {
                    keyboardNavigation: true,
                    todayHighlight: true,
                    autoclose: true,
                    //daysOfWeekDisabled: [0, 6],
                    format: 'mm/dd/yyyy'

                };

                $(element).datepicker(options);
                $(element).datepicker('update', dataSource());
                $(element).on("changeDate", function (ev) {
                    var observable = valueAccessor();
                    if ($(element).is(':focus')) {
                        // Don't update while the user is in the field...
                        // Instead, handle focus loss
                        $(element).one('blur', function (ev) {
                            var dateVal = $(element).datepicker("getDate");                            
                            observable(dateVal);
                        });
                    }
                    else {
                        observable(ev.date);
                        alert(ev.date);
                    }
                });
                //handle removing an element from the dom
                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    $(element).datepicker('remove');
                });
            },
            update: function (element, valueAccessor) {
                var value = ko.utils.unwrapObservable(valueAccessor());

                value = (typeof (value) !== 'object') ? new Date(parseFloat(value.replace(/[^0-9]/g, ''))) : value;
                $(element).datepicker('update', value);
            }
        };
        

        //ko.bindingHandlers.dateTimePicker = {
        //    init: function (element, valueAccessor, allBindingsAccessor) {
        //        //initialize datepicker with some optional options
        //        var options = allBindingsAccessor().dateTimePickerOptions || {};
        //        $(element).datetimepicker(options);

        //        //when a user changes the date, update the view model
        //        ko.utils.registerEventHandler(element, "dp.change", function (event) {
        //            var value = valueAccessor();
        //            if (ko.isObservable(value)) {
        //                if (event.date != null && !(event.date instanceof Date)) {
        //                    value(event.date.toDate());
        //                } else {
        //                    value(event.date);
        //                }
        //            }
        //        });

        //        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
        //            var picker = $(element).data("DateTimePicker");
        //            if (picker) {
        //                picker.destroy();
        //            }
        //        });
        //    },
        //    update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {

        //        var picker = $(element).data("DateTimePicker");
        //        //when the view model is updated, update the widget
        //        if (picker) {
        //            var koDate = ko.utils.unwrapObservable(valueAccessor());

        //            //in case return from server datetime i am get in this form for example /Date(93989393)/ then fomat this
        //            koDate = (typeof (koDate) !== 'object') ? new Date(parseFloat(koDate.replace(/[^0-9]/g, ''))) : koDate;

        //            picker.date(koDate);
        //        }
        //    }
        //};


        var viewModel = function () {
            var self = this;
            self.datasheets = ko.observableArray([]);
            self.isAdmin = '@User.IsInRole("Admin")';
            self.tags = ko.observableArray(@Html.Raw(Model.Tags));
            
            self.submitChanges = function () {
                $('.btn').attr('disabled', 'disabled');
                $.ajax({
                    dataType: "json",
                    type: 'POST',
                    url: "/Data/PostDataSheetChanges",
                    data: { sheet: ko.toJSON(self.datasheets()) },
                    success: function (returnData) {
                        alert('Datasheet has been successfully updated');
                        $('.btn').removeAttr('disabled');
                    },
                    error: function (err) {
                        alert('Error submitting the data: ' + err);
                        $('.btn').removeAttr('disabled');
                    }
                });
            };

            var month = $('#Month').val();
            var year = $('#Year').val();
            var args = { month: month, year: year };

            $.ajax({
                dataType: "json",
                url: "/Data/GetDataSheet",
                data: args,
                success: function (returnData) {

                    ko.mapping.fromJS(returnData, {}, self.datasheets);
                },
                error: function (err) {
                    alert('Error getting data: ' + err);
                }
            });
        }

        ko.applyBindings(new viewModel());

    </script>


}
